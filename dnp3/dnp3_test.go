package dnp3_test

import (
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"slices"
	"strings"
	"testing"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/google/gopacket/pcap"
	"github.com/nblair2/go-dnp3/dnp3"
)

var (
	customPcapsFlag string
	customPcaps     []string

	tests = []struct {
		name  string
		input []byte
	}{
		{
			"Request/ReadClass1230",
			[]byte{
				0x05, 0x64, 0x14, 0xc4, 0x04, 0x00, 0x03, 0x00,
				0xc7, 0x17, 0xc4, 0xc5, 0x01, 0x3c, 0x02, 0x06,
				0x3c, 0x03, 0x06, 0x3c, 0x04, 0x06, 0x3c, 0x01,
				0x06, 0xa3, 0x61,
			},
		},
		{
			"Request/ReadBinaryInputChange",
			[]byte{
				0x05, 0x64, 0x0b, 0xc4, 0x00, 0x04, 0x01, 0x00,
				0xca, 0x8a, 0xc0, 0xc1, 0x01, 0x02, 0x00, 0x06,
				0x95, 0x76,
			},
		},
		{
			"Request/WriteTime",
			[]byte{
				0x05, 0x64, 0x12, 0xc4, 0x04, 0x00, 0x03, 0x00,
				0x1e, 0x7c, 0xc1, 0xc1, 0x02, 0x32, 0x01, 0x07,
				0x01, 0xeb, 0xe4, 0x5a, 0x87, 0xff, 0x00, 0x28,
				0x01,
			},
		},
		{
			"Request/Select",
			[]byte{
				0x05, 0x64, 0x1a, 0xc4, 0x04, 0x00, 0x03, 0x00,
				0xc2, 0xe6, 0xd2, 0xc3, 0x03, 0x0c, 0x01, 0x28,
				0x01, 0x00, 0x9f, 0x86, 0x03, 0x01, 0x64, 0x00,
				0x00, 0x00, 0xec, 0x41, 0x64, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x5b,
			},
		},
		{
			"Response/AllIINSet",
			[]byte{
				0x05, 0x64, 0x0a, 0x44, 0x03, 0x00, 0x04, 0x00,
				0x7c, 0xae, 0xe7, 0xc1, 0x81, 0xff, 0x3f, 0x1c,
				0x48,
			},
		},
		{
			"Response/GV_02-02",
			[]byte{
				0x05, 0x64, 0x2a, 0x44, 0x01, 0x00, 0x00, 0x04,
				0xe5, 0x79, 0xc1, 0xe2, 0x81, 0x90, 0x00, 0x02,
				0x02, 0x28, 0x03, 0x00, 0x00, 0x00, 0x81, 0xda,
				0x33, 0xd2, 0xdf, 0xe5, 0x64, 0x71, 0x01, 0x00,
				0x00, 0x01, 0xda, 0x33, 0xd2, 0x64, 0x71, 0x01,
				0xff, 0xff, 0x81, 0xdb, 0xdd, 0x14, 0x33, 0xd2,
				0x64, 0x71, 0x01, 0x38, 0x5d,
			},
		},
		{
			"Response/GV_01-01_10-02_20-05_21-09_30-03",
			[]byte{
				0x05, 0x64, 0x4e, 0x44, 0x03, 0x00, 0x04, 0x00,
				0x6f, 0x4d, 0xc7, 0xc7, 0x81, 0x00, 0x00, 0x01,
				0x01, 0x00, 0x00, 0x05, 0x19, 0x0a, 0x02, 0x00,
				0x00, 0x05, 0xc3, 0x47, 0x81, 0x01, 0x81, 0x81,
				0x01, 0x01, 0x14, 0x05, 0x00, 0x00, 0x00, 0x20,
				0x00, 0x00, 0x00, 0x15, 0xf1, 0x7b, 0x09, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x03,
				0x00, 0x00, 0x06, 0xca, 0x00, 0x00, 0x18, 0x7e,
				0x00, 0xcb, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00,
				0x00, 0xff, 0xff, 0xff, 0xff, 0x66, 0x21, 0x00,
				0xd6, 0xf3, 0x00, 0x59, 0x21, 0x00, 0x00, 0x4b,
				0x21, 0x00, 0x00, 0xe0, 0x51,
			},
		},
	}
)

func TestMain(m *testing.M) {
	flag.StringVar(&customPcapsFlag, "pcaps", "", "Comma-separated list of pcap files to read")
	flag.Parse()

	if customPcapsFlag != "" {
		customPcaps = splitComma(customPcapsFlag)
	}

	os.Exit(m.Run())
}

func TestDNP3(t *testing.T) {
	t.Parallel()

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()
			testFromBytesToBytesStringMarshal(t, tc.input)
		})
	}
}

func TestCustomPcaps(t *testing.T) {
	t.Parallel()
	flag.Parse()

	if len(customPcaps) == 0 {
		t.Skip("No custom pcap file provided")
	}

	for _, pcapFile := range customPcaps {
		t.Run(pcapFile, func(t *testing.T) {
			t.Parallel()

			handle, err := pcap.OpenOffline(pcapFile)
			if err != nil {
				t.Skipf("Error opening PCAP: %v", err)
			}
			defer handle.Close()

			pcap := gopacket.NewPacketSource(handle, handle.LinkType())

			i := 0
			for pkt := range pcap.Packets() {
				i++

				tcpLayer := pkt.Layer(layers.LayerTypeTCP)
				if tcpLayer != nil {
					tcp, _ := tcpLayer.(*layers.TCP)

					input := tcp.Payload
					if len(input) < 10 {
						continue
					}

					t.Run(fmt.Sprintf("Packet%d", i), func(t *testing.T) {
						testFromBytesToBytesStringMarshal(t, input)
					})
				}
			}
		})
	}
}

func testFromBytesToBytesStringMarshal(t *testing.T, input []byte) {
	t.Helper()

	d := dnp3.DNP3{}

	err := d.FromBytes(input)
	if err != nil {
		t.Fatal("FromBytes:", err)
	}

	output, err := d.ToBytes()
	if err != nil {
		t.Fatal("ToBytes:", err)
	}

	if !slices.Equal(input, output) {
		t.Fatal("Input and Output not equal")
	}

	_ = d.String()

	_, err = json.MarshalIndent(d, "", "  ")
	if err != nil {
		t.Fatal("MarshalIndent:", err)
	}
}

func splitComma(s string) []string {
	var out []string

	for _, v := range strings.Split(s, ",") {
		v = strings.TrimSpace(v)
		if v != "" {
			out = append(out, v)
		}
	}

	return out
}
